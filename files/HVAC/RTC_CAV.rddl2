//Room Temperature Control Simulation
//Here we define space as object, which includes rooms, hallways, and outside of the building.
//Out objective is to save the cost of using HVAC system, while controlling the room temperature within a certain desired range.
//We use HVAC system to control the temperature of each room, by turning the HVAC (heating) air on/off
//Reward function is to calculate the cost to providing cooling/warming control.
//There will also be thermal transfer both between each space, which will impact the room temperature
//The amount of heat transferred depends on the temperature difference and the Thermal Resistance of the wall between the spaces
//We assigns a penalty that will be applied if the room temperature goes beyond the desired temperature range

domain rtc_cav{
	  types {
		  space : object;
  	};

  	pvariables {
  		//Constants
  		ADJ(space, space)    	: { non-fluent, bool, default = false };	//Indicate if two rooms are adjacent to each other
  		R_WALL(space, space) 	: { non-fluent, real, default = 2 };	//Thermal Resistance of the wall between two rooms
  		IS_ROOM(space)			: { non-fluent, bool, default = false };	//Indicate if the space is a room; otherwise it could be a hallway or outside
  		CAP(space) 				: { non-fluent, real, default = 20 }; //Heat Capacity of the room
  		CAP_AIR 				: { non-fluent, real, default = 1.006 }; //Heat Capacity of the air; unit of kj/(kg*C)
  		COST_AIR 				: { non-fluent, real, default = 1 };	//Cost of heated air from HVAC; unit of $/kg
  		M_AIR 					: { non-fluent, real, default = 2.7 }; //Mass of HVAC Air Entered the building per second; Unit of kg／
  		TIME_DELTA 				: { non-fluent, real, default = 1 }; //Delta time used to find change in temperature；unit of min
  		TEMP_AIR 				: { non-fluent, real, default = 40 }; //Set a fixed temperature for HVAC air
  		TEMP_UP 				: { non-fluent, real, default = 23.5 }; //Set an upper bound for the desired temperature range
  		TEMP_LOW 				: { non-fluent, real, default = 20.0 }; //Set a lower bound for the desired temperature range
  		PENALTY 				: { non-fluent, real, default = 20000 }; //A penalty applied when the room temperature goes beyond the desired range
		//TEMP_VAR				: { non-fluent, real, default = 7 };	//Variance of outside temperature

  		//State Variable
  		TEMP(space) 			: { state-fluent, real, default = 10.0 };	//Temperature of the space
		AIR_ON(space)  			:{ state-fluent, bool, default = false};//State Variable to indicate if the Air is on; used in visualization
		round 					: { state-fluent, int, default = 0 };	// The current round 
  		//Action
  		AIR(space) 			 	: { action-fluent, bool, default = false }; //Indicate if the HVAC System is open/closed for the room - Constant Air Volume System
	};

  	cpfs {
  		//State
  		TEMP'(?s) = TEMP(?s) + IS_ROOM(?s) * TIME_DELTA/CAP(?s) * ((AIR(?s) * M_AIR) * CAP_AIR * (TEMP_AIR - TEMP(?s)) + sum_{?p : space} ((ADJ(?s, ?p) | ADJ(?p, ?s)) * (TEMP(?p) - TEMP(?s)) / R_WALL(?s, ?p)));
		round' = round + 1;				// Update the round
		AIR_ON'(?s) = AIR(?s)^IS_ROOM(?s);	//Record the Action in the room
		};

  	reward = - (sum_{?s : space} IS_ROOM(?s)*((AIR(?s) * M_AIR) * COST_AIR
  			    + ((TEMP(?s) < TEMP_LOW) | (TEMP(?s) > TEMP_UP)) * PENALTY));

}


non-fluents nf_rtc_cav{
	domain = rtc_cav;

	objects{
		space : { r1, r2, r3, h1, o1 }; //Three rooms, one hallway, and the outside world
	};

	non-fluents {
		//Define rooms
		IS_ROOM(r1) = true;
		IS_ROOM(r2) = true;
		IS_ROOM(r3) = true;

		//Define the adjacency
		ADJ(r1, r2) = true;
		ADJ(r2, h1) = true;
		ADJ(r3, h1) = true;
		ADJ(h1, o1) = true;
		ADJ(r1, o1) = true;
		ADJ(r2, o1) = true;
		ADJ(r3, o1) = true;
	};
}

instance inst_rtc_cav{
	domain = rtc_cav;
	non-fluents = nf_rtc_cav;

	horizon = 100;
	discount = 0.9;
}
