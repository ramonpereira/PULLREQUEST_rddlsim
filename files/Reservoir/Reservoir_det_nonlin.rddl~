//////////////////////////////////////
//Reservior.rddl
//
//Auther:GA WU
//////////////////////////////////////

domain Reservoir_Problem{

	requirements = { 
		reward-deterministic 
	};

	types {
		id: object;
	};
	
	pvariables {
	
		// Constant
		MAXCAP(id): { non-fluent, real, default = 100.0 };
		HIGH_BOUND(id): { non-fluent, real, default = 80.0 };
		LOW_BOUND(id): { non-fluent, real, default = 20.0 };
		RAIN(id): { non-fluent ,real, default = 5.0 };
		DOWNSTREAM(id,id): { non-fluent ,bool, default = false };
		DOWNTOSEA(id): { non-fluent, bool, default = false };
		REACTIONFACTOR(id): { non-fluent,real, default = .0005 };
		
		//Intermediate State
		intermdischarge(id): {interm-fluent, real};
		intermdischarge2(id): {interm-fluent, real};
		inflow(id): {interm-fluent, real};
		outflow(id): {interm-fluent, real};

		//State
		rlevel(id): {state-fluent, real, default = 50.0 };
		discharge(id): {state-fluent, real, default = 0.0 };
		flowDuplicate(id): {state-fluent, real, default = 0.0 };
		
		//Action
		flow(id): { action-fluent, real, default = 0.0 };
	};
	
	cpfs {	
		flowDuplicate'(?r) = flow(?r);

		inflow(?r) = RAIN(?r) + sum_{?r2: id}[DOWNSTREAM(?r2,?r)*flowDuplicate(?r2)];

		outflow(?r) = flowDuplicate(?r) + discharge(?r);
		
		intermdischarge(?r) = outflow(?r) * exp[(-1)*(REACTIONFACTOR(?r)) * rlevel(?r)] + inflow(?r) * (1 - exp[(-1)*(REACTIONFACTOR(?r)) * rlevel(?r)]);

		intermdischarge2(?r) = if(0 <= intermdischarge(?r) ^ intermdischarge(?r) <= rlevel(?r) - flow(?r)) then intermdischarge(?r) 
					else 0;

		rlevel'(?r) = rlevel(?r) + RAIN(?r) - flow(?r) - intermdischarge2(?r) + sum_{?r2: id}[DOWNSTREAM(?r2,?r)*flow(?r2)];

		discharge'(?r) = intermdischarge2(?r);
	};
	
	reward = sum_{?r: id} [if (rlevel'(?r)>=LOW_BOUND(?r) ^ (rlevel'(?r)<=HIGH_BOUND(?r)))
									then 0
 									else if (rlevel'(?r)<LOW_BOUND(?r))
 										then (-5)*(LOW_BOUND(?r)-rlevel'(?r))
										else (-100)*(rlevel'(?r)-HIGH_BOUND(?r))]+sum_{?r2:id}[abs[((HIGH_BOUND(?r2)+LOW_BOUND(?r2))/2.0)-rlevel'(?r2)]*(-0.1)];
								
	state-action-constraints {
	
		forall_{?r:id} flow(?r)<=rlevel(?r);
		forall_{?r:id} flow(?r)<=sum_{?r2: id}[(MAXCAP(?r2)-rlevel(?r2))*DOWNSTREAM(?r,?r2)]+100000*DOWNTOSEA(?r);
		forall_{?r:id} flow(?r)>=0;
	};

}

non-fluents Reservoir_non {
	domain = Reservoir_Problem;
	objects{
		id: {t1,t2,t3,t4};
	};
	non-fluents {
		RAIN(t1) = 5.0;
		RAIN(t2) = 10.0;
		RAIN(t3) = 20.0;
		RAIN(t4) = 30.0;
		MAXCAP(t2) = 200.0;
		LOW_BOUND(t2) = 30.0;
		HIGH_BOUND(t2) = 180.0;
		MAXCAP(t3) = 400.0;
		LOW_BOUND(t3) = 40.0;
		HIGH_BOUND(t3) = 380.0;
		MAXCAP(t4) = 500.0;
		LOW_BOUND(t4) = 60.0;
		HIGH_BOUND(t4) = 480.0;
		DOWNSTREAM(t1,t2);DOWNSTREAM(t2,t3);DOWNSTREAM(t3,t4);DOWNTOSEA(t4);
	};
}

instance is1{
	domain = Reservoir_Problem;
	non-fluents = Reservoir_non;
	init-state{
		rlevel(t1) = 75.0;
	};
	max-nondef-actions = 4;
	horizon = 10;
	discount = 1.0;
}